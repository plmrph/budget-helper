#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def authenticate(self):
        """
        Authenticate to the external platform (e.g., BudgetingPlatform, EmailPlatform)
        If already authenticated, returns status. Otherwise, attempts authentication and persists result.
        Fetches information from Configs singleton, and populates auth data back to Configs

        """
        pass

    def getAccounts(self, platform):
        """
        Parameters:
         - platform

        """
        pass

    def getCategories(self, platform):
        """
        Parameters:
         - platform

        """
        pass

    def getPayees(self, platform):
        """
        Parameters:
         - platform

        """
        pass

    def getBudgets(self, platform):
        """
        Parameters:
         - platform

        """
        pass

    def getTransactions(self, platform, isPending, startDate, endDate):
        """
        Parameters:
         - platform
         - isPending
         - startDate
         - endDate

        """
        pass

    def updateTransactions(self, transactions, platform):
        """
        Parameters:
         - transactions
         - platform

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def authenticate(self):
        """
        Authenticate to the external platform (e.g., BudgetingPlatform, EmailPlatform)
        If already authenticated, returns status. Otherwise, attempts authentication and persists result.
        Fetches information from Configs singleton, and populates auth data back to Configs

        """
        self.send_authenticate()
        return self.recv_authenticate()

    def send_authenticate(self):
        self._oprot.writeMessageBegin('authenticate', TMessageType.CALL, self._seqid)
        args = authenticate_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_authenticate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = authenticate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        if result.remoteError is not None:
            raise result.remoteError
        raise TApplicationException(TApplicationException.MISSING_RESULT, "authenticate failed: unknown result")

    def getAccounts(self, platform):
        """
        Parameters:
         - platform

        """
        self.send_getAccounts(platform)
        return self.recv_getAccounts()

    def send_getAccounts(self, platform):
        self._oprot.writeMessageBegin('getAccounts', TMessageType.CALL, self._seqid)
        args = getAccounts_args()
        args.platform = platform
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getAccounts(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getAccounts_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        if result.notFound is not None:
            raise result.notFound
        if result.remoteError is not None:
            raise result.remoteError
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getAccounts failed: unknown result")

    def getCategories(self, platform):
        """
        Parameters:
         - platform

        """
        self.send_getCategories(platform)
        return self.recv_getCategories()

    def send_getCategories(self, platform):
        self._oprot.writeMessageBegin('getCategories', TMessageType.CALL, self._seqid)
        args = getCategories_args()
        args.platform = platform
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCategories(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCategories_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        if result.notFound is not None:
            raise result.notFound
        if result.remoteError is not None:
            raise result.remoteError
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCategories failed: unknown result")

    def getPayees(self, platform):
        """
        Parameters:
         - platform

        """
        self.send_getPayees(platform)
        return self.recv_getPayees()

    def send_getPayees(self, platform):
        self._oprot.writeMessageBegin('getPayees', TMessageType.CALL, self._seqid)
        args = getPayees_args()
        args.platform = platform
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getPayees(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getPayees_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        if result.notFound is not None:
            raise result.notFound
        if result.remoteError is not None:
            raise result.remoteError
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getPayees failed: unknown result")

    def getBudgets(self, platform):
        """
        Parameters:
         - platform

        """
        self.send_getBudgets(platform)
        return self.recv_getBudgets()

    def send_getBudgets(self, platform):
        self._oprot.writeMessageBegin('getBudgets', TMessageType.CALL, self._seqid)
        args = getBudgets_args()
        args.platform = platform
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getBudgets(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getBudgets_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        if result.notFound is not None:
            raise result.notFound
        if result.remoteError is not None:
            raise result.remoteError
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getBudgets failed: unknown result")

    def getTransactions(self, platform, isPending, startDate, endDate):
        """
        Parameters:
         - platform
         - isPending
         - startDate
         - endDate

        """
        self.send_getTransactions(platform, isPending, startDate, endDate)
        return self.recv_getTransactions()

    def send_getTransactions(self, platform, isPending, startDate, endDate):
        self._oprot.writeMessageBegin('getTransactions', TMessageType.CALL, self._seqid)
        args = getTransactions_args()
        args.platform = platform
        args.isPending = isPending
        args.startDate = startDate
        args.endDate = endDate
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getTransactions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getTransactions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        if result.notFound is not None:
            raise result.notFound
        if result.remoteError is not None:
            raise result.remoteError
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getTransactions failed: unknown result")

    def updateTransactions(self, transactions, platform):
        """
        Parameters:
         - transactions
         - platform

        """
        self.send_updateTransactions(transactions, platform)
        return self.recv_updateTransactions()

    def send_updateTransactions(self, transactions, platform):
        self._oprot.writeMessageBegin('updateTransactions', TMessageType.CALL, self._seqid)
        args = updateTransactions_args()
        args.transactions = transactions
        args.platform = platform
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_updateTransactions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = updateTransactions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        if result.conflict is not None:
            raise result.conflict
        if result.remoteError is not None:
            raise result.remoteError
        raise TApplicationException(TApplicationException.MISSING_RESULT, "updateTransactions failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["authenticate"] = Processor.process_authenticate
        self._processMap["getAccounts"] = Processor.process_getAccounts
        self._processMap["getCategories"] = Processor.process_getCategories
        self._processMap["getPayees"] = Processor.process_getPayees
        self._processMap["getBudgets"] = Processor.process_getBudgets
        self._processMap["getTransactions"] = Processor.process_getTransactions
        self._processMap["updateTransactions"] = Processor.process_updateTransactions
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_authenticate(self, seqid, iprot, oprot):
        args = authenticate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = authenticate_result()
        try:
            result.success = self._handler.authenticate()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except thrift_gen.exceptions.ttypes.RemoteServiceException as remoteError:
            msg_type = TMessageType.REPLY
            result.remoteError = remoteError
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("authenticate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getAccounts(self, seqid, iprot, oprot):
        args = getAccounts_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getAccounts_result()
        try:
            result.success = self._handler.getAccounts(args.platform)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except thrift_gen.exceptions.ttypes.NotFoundException as notFound:
            msg_type = TMessageType.REPLY
            result.notFound = notFound
        except thrift_gen.exceptions.ttypes.RemoteServiceException as remoteError:
            msg_type = TMessageType.REPLY
            result.remoteError = remoteError
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getAccounts", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCategories(self, seqid, iprot, oprot):
        args = getCategories_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCategories_result()
        try:
            result.success = self._handler.getCategories(args.platform)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except thrift_gen.exceptions.ttypes.NotFoundException as notFound:
            msg_type = TMessageType.REPLY
            result.notFound = notFound
        except thrift_gen.exceptions.ttypes.RemoteServiceException as remoteError:
            msg_type = TMessageType.REPLY
            result.remoteError = remoteError
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCategories", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getPayees(self, seqid, iprot, oprot):
        args = getPayees_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getPayees_result()
        try:
            result.success = self._handler.getPayees(args.platform)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except thrift_gen.exceptions.ttypes.NotFoundException as notFound:
            msg_type = TMessageType.REPLY
            result.notFound = notFound
        except thrift_gen.exceptions.ttypes.RemoteServiceException as remoteError:
            msg_type = TMessageType.REPLY
            result.remoteError = remoteError
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getPayees", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getBudgets(self, seqid, iprot, oprot):
        args = getBudgets_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getBudgets_result()
        try:
            result.success = self._handler.getBudgets(args.platform)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except thrift_gen.exceptions.ttypes.NotFoundException as notFound:
            msg_type = TMessageType.REPLY
            result.notFound = notFound
        except thrift_gen.exceptions.ttypes.RemoteServiceException as remoteError:
            msg_type = TMessageType.REPLY
            result.remoteError = remoteError
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getBudgets", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getTransactions(self, seqid, iprot, oprot):
        args = getTransactions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getTransactions_result()
        try:
            result.success = self._handler.getTransactions(args.platform, args.isPending, args.startDate, args.endDate)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except thrift_gen.exceptions.ttypes.NotFoundException as notFound:
            msg_type = TMessageType.REPLY
            result.notFound = notFound
        except thrift_gen.exceptions.ttypes.RemoteServiceException as remoteError:
            msg_type = TMessageType.REPLY
            result.remoteError = remoteError
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getTransactions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_updateTransactions(self, seqid, iprot, oprot):
        args = updateTransactions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = updateTransactions_result()
        try:
            result.success = self._handler.updateTransactions(args.transactions, args.platform)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except thrift_gen.exceptions.ttypes.ConflictException as conflict:
            msg_type = TMessageType.REPLY
            result.conflict = conflict
        except thrift_gen.exceptions.ttypes.RemoteServiceException as remoteError:
            msg_type = TMessageType.REPLY
            result.remoteError = remoteError
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("updateTransactions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class authenticate_args(object):
    thrift_spec = None


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('authenticate_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(authenticate_args)
authenticate_args.thrift_spec = (
)


class authenticate_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized
     - remoteError

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None, remoteError = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized
        self.remoteError = remoteError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.remoteError = thrift_gen.exceptions.ttypes.RemoteServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('authenticate_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        if self.remoteError is not None:
            oprot.writeFieldBegin('remoteError', TType.STRUCT, 3)
            self.remoteError.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(authenticate_result)
authenticate_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
    (3, TType.STRUCT, 'remoteError', [thrift_gen.exceptions.ttypes.RemoteServiceException, None], None, ),  # 3
)


class getAccounts_args(object):
    """
    Attributes:
     - platform

    """
    thrift_spec = None


    def __init__(self, platform = None,):
        self.platform = platform

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.platform = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAccounts_args')
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.I32, 1)
            oprot.writeI32(self.platform)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAccounts_args)
getAccounts_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'platform', None, None, ),  # 1
)


class getAccounts_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized
     - notFound
     - remoteError

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None, notFound = None, remoteError = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized
        self.notFound = notFound
        self.remoteError = remoteError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = thrift_gen.entities.ttypes.Account()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.notFound = thrift_gen.exceptions.ttypes.NotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.remoteError = thrift_gen.exceptions.ttypes.RemoteServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getAccounts_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        if self.notFound is not None:
            oprot.writeFieldBegin('notFound', TType.STRUCT, 3)
            self.notFound.write(oprot)
            oprot.writeFieldEnd()
        if self.remoteError is not None:
            oprot.writeFieldBegin('remoteError', TType.STRUCT, 4)
            self.remoteError.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getAccounts_result)
getAccounts_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrift_gen.entities.ttypes.Account, None], False), None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
    (3, TType.STRUCT, 'notFound', [thrift_gen.exceptions.ttypes.NotFoundException, None], None, ),  # 3
    (4, TType.STRUCT, 'remoteError', [thrift_gen.exceptions.ttypes.RemoteServiceException, None], None, ),  # 4
)


class getCategories_args(object):
    """
    Attributes:
     - platform

    """
    thrift_spec = None


    def __init__(self, platform = None,):
        self.platform = platform

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.platform = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCategories_args')
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.I32, 1)
            oprot.writeI32(self.platform)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCategories_args)
getCategories_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'platform', None, None, ),  # 1
)


class getCategories_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized
     - notFound
     - remoteError

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None, notFound = None, remoteError = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized
        self.notFound = notFound
        self.remoteError = remoteError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = thrift_gen.entities.ttypes.Category()
                        _elem12.read(iprot)
                        self.success.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.notFound = thrift_gen.exceptions.ttypes.NotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.remoteError = thrift_gen.exceptions.ttypes.RemoteServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCategories_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter13 in self.success:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        if self.notFound is not None:
            oprot.writeFieldBegin('notFound', TType.STRUCT, 3)
            self.notFound.write(oprot)
            oprot.writeFieldEnd()
        if self.remoteError is not None:
            oprot.writeFieldBegin('remoteError', TType.STRUCT, 4)
            self.remoteError.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCategories_result)
getCategories_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrift_gen.entities.ttypes.Category, None], False), None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
    (3, TType.STRUCT, 'notFound', [thrift_gen.exceptions.ttypes.NotFoundException, None], None, ),  # 3
    (4, TType.STRUCT, 'remoteError', [thrift_gen.exceptions.ttypes.RemoteServiceException, None], None, ),  # 4
)


class getPayees_args(object):
    """
    Attributes:
     - platform

    """
    thrift_spec = None


    def __init__(self, platform = None,):
        self.platform = platform

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.platform = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPayees_args')
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.I32, 1)
            oprot.writeI32(self.platform)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPayees_args)
getPayees_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'platform', None, None, ),  # 1
)


class getPayees_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized
     - notFound
     - remoteError

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None, notFound = None, remoteError = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized
        self.notFound = notFound
        self.remoteError = remoteError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = thrift_gen.entities.ttypes.Payee()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.notFound = thrift_gen.exceptions.ttypes.NotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.remoteError = thrift_gen.exceptions.ttypes.RemoteServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getPayees_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        if self.notFound is not None:
            oprot.writeFieldBegin('notFound', TType.STRUCT, 3)
            self.notFound.write(oprot)
            oprot.writeFieldEnd()
        if self.remoteError is not None:
            oprot.writeFieldBegin('remoteError', TType.STRUCT, 4)
            self.remoteError.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getPayees_result)
getPayees_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrift_gen.entities.ttypes.Payee, None], False), None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
    (3, TType.STRUCT, 'notFound', [thrift_gen.exceptions.ttypes.NotFoundException, None], None, ),  # 3
    (4, TType.STRUCT, 'remoteError', [thrift_gen.exceptions.ttypes.RemoteServiceException, None], None, ),  # 4
)


class getBudgets_args(object):
    """
    Attributes:
     - platform

    """
    thrift_spec = None


    def __init__(self, platform = None,):
        self.platform = platform

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.platform = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getBudgets_args')
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.I32, 1)
            oprot.writeI32(self.platform)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getBudgets_args)
getBudgets_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'platform', None, None, ),  # 1
)


class getBudgets_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized
     - notFound
     - remoteError

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None, notFound = None, remoteError = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized
        self.notFound = notFound
        self.remoteError = remoteError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = thrift_gen.entities.ttypes.Budget()
                        _elem26.read(iprot)
                        self.success.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.notFound = thrift_gen.exceptions.ttypes.NotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.remoteError = thrift_gen.exceptions.ttypes.RemoteServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getBudgets_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter27 in self.success:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        if self.notFound is not None:
            oprot.writeFieldBegin('notFound', TType.STRUCT, 3)
            self.notFound.write(oprot)
            oprot.writeFieldEnd()
        if self.remoteError is not None:
            oprot.writeFieldBegin('remoteError', TType.STRUCT, 4)
            self.remoteError.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getBudgets_result)
getBudgets_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrift_gen.entities.ttypes.Budget, None], False), None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
    (3, TType.STRUCT, 'notFound', [thrift_gen.exceptions.ttypes.NotFoundException, None], None, ),  # 3
    (4, TType.STRUCT, 'remoteError', [thrift_gen.exceptions.ttypes.RemoteServiceException, None], None, ),  # 4
)


class getTransactions_args(object):
    """
    Attributes:
     - platform
     - isPending
     - startDate
     - endDate

    """
    thrift_spec = None


    def __init__(self, platform = None, isPending = None, startDate = None, endDate = None,):
        self.platform = platform
        self.isPending = isPending
        self.startDate = startDate
        self.endDate = endDate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.platform = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isPending = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.endDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTransactions_args')
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.I32, 1)
            oprot.writeI32(self.platform)
            oprot.writeFieldEnd()
        if self.isPending is not None:
            oprot.writeFieldBegin('isPending', TType.BOOL, 2)
            oprot.writeBool(self.isPending)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 3)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.STRING, 4)
            oprot.writeString(self.endDate.encode('utf-8') if sys.version_info[0] == 2 else self.endDate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTransactions_args)
getTransactions_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'platform', None, None, ),  # 1
    (2, TType.BOOL, 'isPending', None, None, ),  # 2
    (3, TType.STRING, 'startDate', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'endDate', 'UTF8', None, ),  # 4
)


class getTransactions_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized
     - notFound
     - remoteError

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None, notFound = None, remoteError = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized
        self.notFound = notFound
        self.remoteError = remoteError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = thrift_gen.entities.ttypes.Transaction()
                        _elem33.read(iprot)
                        self.success.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.notFound = thrift_gen.exceptions.ttypes.NotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.remoteError = thrift_gen.exceptions.ttypes.RemoteServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getTransactions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter34 in self.success:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        if self.notFound is not None:
            oprot.writeFieldBegin('notFound', TType.STRUCT, 3)
            self.notFound.write(oprot)
            oprot.writeFieldEnd()
        if self.remoteError is not None:
            oprot.writeFieldBegin('remoteError', TType.STRUCT, 4)
            self.remoteError.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getTransactions_result)
getTransactions_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrift_gen.entities.ttypes.Transaction, None], False), None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
    (3, TType.STRUCT, 'notFound', [thrift_gen.exceptions.ttypes.NotFoundException, None], None, ),  # 3
    (4, TType.STRUCT, 'remoteError', [thrift_gen.exceptions.ttypes.RemoteServiceException, None], None, ),  # 4
)


class updateTransactions_args(object):
    """
    Attributes:
     - transactions
     - platform

    """
    thrift_spec = None


    def __init__(self, transactions = None, platform = None,):
        self.transactions = transactions
        self.platform = platform

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = thrift_gen.entities.ttypes.Transaction()
                        _elem40.read(iprot)
                        self.transactions.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.platform = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('updateTransactions_args')
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter41 in self.transactions:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.I32, 2)
            oprot.writeI32(self.platform)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(updateTransactions_args)
updateTransactions_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'transactions', (TType.STRUCT, [thrift_gen.entities.ttypes.Transaction, None], False), None, ),  # 1
    (2, TType.I32, 'platform', None, None, ),  # 2
)


class updateTransactions_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized
     - conflict
     - remoteError

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None, conflict = None, remoteError = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized
        self.conflict = conflict
        self.remoteError = remoteError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.conflict = thrift_gen.exceptions.ttypes.ConflictException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.remoteError = thrift_gen.exceptions.ttypes.RemoteServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('updateTransactions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        if self.conflict is not None:
            oprot.writeFieldBegin('conflict', TType.STRUCT, 3)
            self.conflict.write(oprot)
            oprot.writeFieldEnd()
        if self.remoteError is not None:
            oprot.writeFieldBegin('remoteError', TType.STRUCT, 4)
            self.remoteError.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(updateTransactions_result)
updateTransactions_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
    (3, TType.STRUCT, 'conflict', [thrift_gen.exceptions.ttypes.ConflictException, None], None, ),  # 3
    (4, TType.STRUCT, 'remoteError', [thrift_gen.exceptions.ttypes.RemoteServiceException, None], None, ),  # 4
)
fix_spec(all_structs)
del all_structs
