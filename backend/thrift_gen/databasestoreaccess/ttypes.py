#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys
import thrift_gen.entities.ttypes
import thrift_gen.exceptions.ttypes

from thrift.transport import TTransport
all_structs = []


class FilterOperator(object):
    EQ = 1
    NEQ = 2
    GT = 3
    GTE = 4
    LT = 5
    LTE = 6
    LIKE = 7
    IN = 8

    _VALUES_TO_NAMES = {
        1: "EQ",
        2: "NEQ",
        3: "GT",
        4: "GTE",
        5: "LT",
        6: "LTE",
        7: "LIKE",
        8: "IN",
    }

    _NAMES_TO_VALUES = {
        "EQ": 1,
        "NEQ": 2,
        "GT": 3,
        "GTE": 4,
        "LT": 5,
        "LTE": 6,
        "LIKE": 7,
        "IN": 8,
    }


class SortDirection(object):
    ASC = 1
    DESC = 2

    _VALUES_TO_NAMES = {
        1: "ASC",
        2: "DESC",
    }

    _NAMES_TO_VALUES = {
        "ASC": 1,
        "DESC": 2,
    }


class FilterValue(object):
    """
    Attributes:
     - stringValue
     - intValue
     - doubleValue
     - boolValue
     - timestampValue

    """
    thrift_spec = None


    def __init__(self, stringValue = None, intValue = None, doubleValue = None, boolValue = None, timestampValue = None,):
        self.stringValue = stringValue
        self.intValue = intValue
        self.doubleValue = doubleValue
        self.boolValue = boolValue
        self.timestampValue = timestampValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.intValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.doubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.boolValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.timestampValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FilterValue')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.intValue is not None:
            oprot.writeFieldBegin('intValue', TType.I64, 2)
            oprot.writeI64(self.intValue)
            oprot.writeFieldEnd()
        if self.doubleValue is not None:
            oprot.writeFieldBegin('doubleValue', TType.DOUBLE, 3)
            oprot.writeDouble(self.doubleValue)
            oprot.writeFieldEnd()
        if self.boolValue is not None:
            oprot.writeFieldBegin('boolValue', TType.BOOL, 4)
            oprot.writeBool(self.boolValue)
            oprot.writeFieldEnd()
        if self.timestampValue is not None:
            oprot.writeFieldBegin('timestampValue', TType.STRING, 5)
            oprot.writeString(self.timestampValue.encode('utf-8') if sys.version_info[0] == 2 else self.timestampValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Filter(object):
    """
    Attributes:
     - fieldName
     - operator
     - value

    """
    thrift_spec = None


    def __init__(self, fieldName = None, operator = None, value = None,):
        self.fieldName = fieldName
        self.operator = operator
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fieldName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.operator = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.value = FilterValue()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Filter')
        if self.fieldName is not None:
            oprot.writeFieldBegin('fieldName', TType.STRING, 1)
            oprot.writeString(self.fieldName.encode('utf-8') if sys.version_info[0] == 2 else self.fieldName)
            oprot.writeFieldEnd()
        if self.operator is not None:
            oprot.writeFieldBegin('operator', TType.I32, 2)
            oprot.writeI32(self.operator)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 3)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Sort(object):
    """
    Attributes:
     - fieldName
     - direction

    """
    thrift_spec = None


    def __init__(self, fieldName = None, direction = None,):
        self.fieldName = fieldName
        self.direction = direction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.fieldName = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.direction = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Sort')
        if self.fieldName is not None:
            oprot.writeFieldBegin('fieldName', TType.STRING, 1)
            oprot.writeString(self.fieldName.encode('utf-8') if sys.version_info[0] == 2 else self.fieldName)
            oprot.writeFieldEnd()
        if self.direction is not None:
            oprot.writeFieldBegin('direction', TType.I32, 2)
            oprot.writeI32(self.direction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Query(object):
    """
    Attributes:
     - entityType
     - filters
     - sort
     - limit
     - offset

    """
    thrift_spec = None


    def __init__(self, entityType = None, filters = None, sort = None, limit = None, offset = None,):
        self.entityType = entityType
        self.filters = filters
        self.sort = sort
        self.limit = limit
        self.offset = offset

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.entityType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.filters = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = Filter()
                        _elem5.read(iprot)
                        self.filters.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.sort = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = Sort()
                        _elem11.read(iprot)
                        self.sort.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.limit = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.offset = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Query')
        if self.entityType is not None:
            oprot.writeFieldBegin('entityType', TType.I32, 1)
            oprot.writeI32(self.entityType)
            oprot.writeFieldEnd()
        if self.filters is not None:
            oprot.writeFieldBegin('filters', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.filters))
            for iter12 in self.filters:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sort is not None:
            oprot.writeFieldBegin('sort', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.sort))
            for iter13 in self.sort:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.limit is not None:
            oprot.writeFieldBegin('limit', TType.I32, 4)
            oprot.writeI32(self.limit)
            oprot.writeFieldEnd()
        if self.offset is not None:
            oprot.writeFieldBegin('offset', TType.I32, 5)
            oprot.writeI32(self.offset)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueryResult(object):
    """
    Attributes:
     - entities
     - totalCount
     - pageNumber
     - pageSize

    """
    thrift_spec = None


    def __init__(self, entities = None, totalCount = None, pageNumber = None, pageSize = None,):
        self.entities = entities
        self.totalCount = totalCount
        self.pageNumber = pageNumber
        self.pageSize = pageSize

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.entities = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = thrift_gen.entities.ttypes.Entity()
                        _elem19.read(iprot)
                        self.entities.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.totalCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.pageNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.pageSize = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QueryResult')
        if self.entities is not None:
            oprot.writeFieldBegin('entities', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.entities))
            for iter20 in self.entities:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.totalCount is not None:
            oprot.writeFieldBegin('totalCount', TType.I32, 2)
            oprot.writeI32(self.totalCount)
            oprot.writeFieldEnd()
        if self.pageNumber is not None:
            oprot.writeFieldBegin('pageNumber', TType.I32, 3)
            oprot.writeI32(self.pageNumber)
            oprot.writeFieldEnd()
        if self.pageSize is not None:
            oprot.writeFieldBegin('pageSize', TType.I32, 4)
            oprot.writeI32(self.pageSize)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(FilterValue)
FilterValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
    (2, TType.I64, 'intValue', None, None, ),  # 2
    (3, TType.DOUBLE, 'doubleValue', None, None, ),  # 3
    (4, TType.BOOL, 'boolValue', None, None, ),  # 4
    (5, TType.STRING, 'timestampValue', 'UTF8', None, ),  # 5
)
all_structs.append(Filter)
Filter.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fieldName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'operator', None, None, ),  # 2
    (3, TType.STRUCT, 'value', [FilterValue, None], None, ),  # 3
)
all_structs.append(Sort)
Sort.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'fieldName', 'UTF8', None, ),  # 1
    (2, TType.I32, 'direction', None, None, ),  # 2
)
all_structs.append(Query)
Query.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'entityType', None, None, ),  # 1
    (2, TType.LIST, 'filters', (TType.STRUCT, [Filter, None], False), None, ),  # 2
    (3, TType.LIST, 'sort', (TType.STRUCT, [Sort, None], False), None, ),  # 3
    (4, TType.I32, 'limit', None, None, ),  # 4
    (5, TType.I32, 'offset', None, None, ),  # 5
)
all_structs.append(QueryResult)
QueryResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'entities', (TType.STRUCT, [thrift_gen.entities.ttypes.Entity, None], False), None, ),  # 1
    (2, TType.I32, 'totalCount', None, None, ),  # 2
    (3, TType.I32, 'pageNumber', None, None, ),  # 3
    (4, TType.I32, 'pageSize', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
