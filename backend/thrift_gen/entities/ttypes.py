#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys

from thrift.transport import TTransport
all_structs = []


class MetadataType(object):
    Email = 1
    Prediction = 2

    _VALUES_TO_NAMES = {
        1: "Email",
        2: "Prediction",
    }

    _NAMES_TO_VALUES = {
        "Email": 1,
        "Prediction": 2,
    }


class EmailPlatformType(object):
    Gmail = 1

    _VALUES_TO_NAMES = {
        1: "Gmail",
    }

    _NAMES_TO_VALUES = {
        "Gmail": 1,
    }


class BudgetingPlatformType(object):
    YNAB = 1

    _VALUES_TO_NAMES = {
        1: "YNAB",
    }

    _NAMES_TO_VALUES = {
        "YNAB": 1,
    }


class ModelType(object):
    PXBlendSC = 1

    _VALUES_TO_NAMES = {
        1: "PXBlendSC",
    }

    _NAMES_TO_VALUES = {
        "PXBlendSC": 1,
    }


class ConfigType(object):
    System = 1
    Email = 2
    AI = 3
    Display = 4
    ExternalSystem = 5

    _VALUES_TO_NAMES = {
        1: "System",
        2: "Email",
        3: "AI",
        4: "Display",
        5: "ExternalSystem",
    }

    _NAMES_TO_VALUES = {
        "System": 1,
        "Email": 2,
        "AI": 3,
        "Display": 4,
        "ExternalSystem": 5,
    }


class SyncStatus(object):
    Success = 1
    Pending = 2
    Partial = 3
    Fail = 4

    _VALUES_TO_NAMES = {
        1: "Success",
        2: "Pending",
        3: "Partial",
        4: "Fail",
    }

    _NAMES_TO_VALUES = {
        "Success": 1,
        "Pending": 2,
        "Partial": 3,
        "Fail": 4,
    }


class TrainingStatus(object):
    Scheduled = 1
    Pending = 2
    Success = 3
    Fail = 4

    _VALUES_TO_NAMES = {
        1: "Scheduled",
        2: "Pending",
        3: "Success",
        4: "Fail",
    }

    _NAMES_TO_VALUES = {
        "Scheduled": 1,
        "Pending": 2,
        "Success": 3,
        "Fail": 4,
    }


class EntityType(object):
    Transaction = 1
    Metadata = 2
    ConfigItem = 3
    ModelCard = 4
    Account = 5
    Category = 6
    Payee = 7
    Budget = 8
    FileEntity = 9

    _VALUES_TO_NAMES = {
        1: "Transaction",
        2: "Metadata",
        3: "ConfigItem",
        4: "ModelCard",
        5: "Account",
        6: "Category",
        7: "Payee",
        8: "Budget",
        9: "FileEntity",
    }

    _NAMES_TO_VALUES = {
        "Transaction": 1,
        "Metadata": 2,
        "ConfigItem": 3,
        "ModelCard": 4,
        "Account": 5,
        "Category": 6,
        "Payee": 7,
        "Budget": 8,
        "FileEntity": 9,
    }


class PrimitiveValue(object):
    """
    Attributes:
     - stringValue
     - doubleValue
     - intValue
     - boolValue

    """
    thrift_spec = None


    def __init__(self, stringValue = None, doubleValue = None, intValue = None, boolValue = None,):
        self.stringValue = stringValue
        self.doubleValue = doubleValue
        self.intValue = intValue
        self.boolValue = boolValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.doubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.intValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.boolValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PrimitiveValue')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.doubleValue is not None:
            oprot.writeFieldBegin('doubleValue', TType.DOUBLE, 2)
            oprot.writeDouble(self.doubleValue)
            oprot.writeFieldEnd()
        if self.intValue is not None:
            oprot.writeFieldBegin('intValue', TType.I64, 3)
            oprot.writeI64(self.intValue)
            oprot.writeFieldEnd()
        if self.boolValue is not None:
            oprot.writeFieldBegin('boolValue', TType.BOOL, 4)
            oprot.writeBool(self.boolValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExternalSystem(object):
    """
    Attributes:
     - budgetingPlatformType
     - emailPlatformType
     - modelType

    """
    thrift_spec = None


    def __init__(self, budgetingPlatformType = None, emailPlatformType = None, modelType = None,):
        self.budgetingPlatformType = budgetingPlatformType
        self.emailPlatformType = emailPlatformType
        self.modelType = modelType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.budgetingPlatformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.emailPlatformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.modelType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExternalSystem')
        if self.budgetingPlatformType is not None:
            oprot.writeFieldBegin('budgetingPlatformType', TType.I32, 1)
            oprot.writeI32(self.budgetingPlatformType)
            oprot.writeFieldEnd()
        if self.emailPlatformType is not None:
            oprot.writeFieldBegin('emailPlatformType', TType.I32, 2)
            oprot.writeI32(self.emailPlatformType)
            oprot.writeFieldEnd()
        if self.modelType is not None:
            oprot.writeFieldBegin('modelType', TType.I32, 3)
            oprot.writeI32(self.modelType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Metadata(object):
    """
    Attributes:
     - id
     - type
     - value
     - sourceSystem
     - description
     - properties

    """
    thrift_spec = None


    def __init__(self, id = None, type = None, value = None, sourceSystem = None, description = None, properties = None,):
        self.id = id
        self.type = type
        self.value = value
        self.sourceSystem = sourceSystem
        self.description = description
        self.properties = properties

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.value = MetadataValue()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sourceSystem = ExternalSystem()
                    self.sourceSystem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.properties = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = PrimitiveValue()
                        _val6.read(iprot)
                        self.properties[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Metadata')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 3)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        if self.sourceSystem is not None:
            oprot.writeFieldBegin('sourceSystem', TType.STRUCT, 4)
            self.sourceSystem.write(oprot)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 5)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.properties is not None:
            oprot.writeFieldBegin('properties', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.properties))
            for kiter7, viter8 in self.properties.items():
                oprot.writeString(kiter7.encode('utf-8') if sys.version_info[0] == 2 else kiter7)
                viter8.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetadataValue(object):
    """
    Attributes:
     - stringValue
     - predictionResult

    """
    thrift_spec = None


    def __init__(self, stringValue = None, predictionResult = None,):
        self.stringValue = stringValue
        self.predictionResult = predictionResult

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.predictionResult = PredictionResult()
                    self.predictionResult.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MetadataValue')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.predictionResult is not None:
            oprot.writeFieldBegin('predictionResult', TType.STRUCT, 2)
            self.predictionResult.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Transaction(object):
    """
    Attributes:
     - id
     - date
     - amount
     - approved
     - platformType
     - payeeId
     - categoryId
     - accountId
     - budgetId
     - memo
     - metadata

    """
    thrift_spec = None


    def __init__(self, id = None, date = None, amount = None, approved = None, platformType = None, payeeId = None, categoryId = None, accountId = None, budgetId = None, memo = None, metadata = None,):
        self.id = id
        self.date = date
        self.amount = amount
        self.approved = approved
        self.platformType = platformType
        self.payeeId = payeeId
        self.categoryId = categoryId
        self.accountId = accountId
        self.budgetId = budgetId
        self.memo = memo
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.date = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.amount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.approved = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.platformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.payeeId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.categoryId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.accountId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.budgetId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.memo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.metadata = []
                    (_etype12, _size9) = iprot.readListBegin()
                    for _i13 in range(_size9):
                        _elem14 = Metadata()
                        _elem14.read(iprot)
                        self.metadata.append(_elem14)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Transaction')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.date is not None:
            oprot.writeFieldBegin('date', TType.STRING, 2)
            oprot.writeString(self.date.encode('utf-8') if sys.version_info[0] == 2 else self.date)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.I64, 3)
            oprot.writeI64(self.amount)
            oprot.writeFieldEnd()
        if self.approved is not None:
            oprot.writeFieldBegin('approved', TType.BOOL, 4)
            oprot.writeBool(self.approved)
            oprot.writeFieldEnd()
        if self.platformType is not None:
            oprot.writeFieldBegin('platformType', TType.I32, 5)
            oprot.writeI32(self.platformType)
            oprot.writeFieldEnd()
        if self.payeeId is not None:
            oprot.writeFieldBegin('payeeId', TType.STRING, 6)
            oprot.writeString(self.payeeId.encode('utf-8') if sys.version_info[0] == 2 else self.payeeId)
            oprot.writeFieldEnd()
        if self.categoryId is not None:
            oprot.writeFieldBegin('categoryId', TType.STRING, 7)
            oprot.writeString(self.categoryId.encode('utf-8') if sys.version_info[0] == 2 else self.categoryId)
            oprot.writeFieldEnd()
        if self.accountId is not None:
            oprot.writeFieldBegin('accountId', TType.STRING, 8)
            oprot.writeString(self.accountId.encode('utf-8') if sys.version_info[0] == 2 else self.accountId)
            oprot.writeFieldEnd()
        if self.budgetId is not None:
            oprot.writeFieldBegin('budgetId', TType.STRING, 9)
            oprot.writeString(self.budgetId.encode('utf-8') if sys.version_info[0] == 2 else self.budgetId)
            oprot.writeFieldEnd()
        if self.memo is not None:
            oprot.writeFieldBegin('memo', TType.STRING, 10)
            oprot.writeString(self.memo.encode('utf-8') if sys.version_info[0] == 2 else self.memo)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.metadata))
            for iter15 in self.metadata:
                iter15.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SyncState(object):
    """
    Attributes:
     - platformType
     - lastSyncInTime
     - lastSyncOutTime

    """
    thrift_spec = None


    def __init__(self, platformType = None, lastSyncInTime = None, lastSyncOutTime = None,):
        self.platformType = platformType
        self.lastSyncInTime = lastSyncInTime
        self.lastSyncOutTime = lastSyncOutTime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.platformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.lastSyncInTime = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.lastSyncOutTime = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SyncState')
        if self.platformType is not None:
            oprot.writeFieldBegin('platformType', TType.I32, 1)
            oprot.writeI32(self.platformType)
            oprot.writeFieldEnd()
        if self.lastSyncInTime is not None:
            oprot.writeFieldBegin('lastSyncInTime', TType.STRING, 2)
            oprot.writeString(self.lastSyncInTime.encode('utf-8') if sys.version_info[0] == 2 else self.lastSyncInTime)
            oprot.writeFieldEnd()
        if self.lastSyncOutTime is not None:
            oprot.writeFieldBegin('lastSyncOutTime', TType.STRING, 3)
            oprot.writeString(self.lastSyncOutTime.encode('utf-8') if sys.version_info[0] == 2 else self.lastSyncOutTime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConfigValue(object):
    """
    Attributes:
     - stringValue
     - intValue
     - doubleValue
     - boolValue
     - stringList
     - stringMap
     - syncState

    """
    thrift_spec = None


    def __init__(self, stringValue = None, intValue = None, doubleValue = None, boolValue = None, stringList = None, stringMap = None, syncState = None,):
        self.stringValue = stringValue
        self.intValue = intValue
        self.doubleValue = doubleValue
        self.boolValue = boolValue
        self.stringList = stringList
        self.stringMap = stringMap
        self.syncState = syncState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.stringValue = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.intValue = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.doubleValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.boolValue = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.stringList = []
                    (_etype19, _size16) = iprot.readListBegin()
                    for _i20 in range(_size16):
                        _elem21 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.stringList.append(_elem21)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.MAP:
                    self.stringMap = {}
                    (_ktype23, _vtype24, _size22) = iprot.readMapBegin()
                    for _i26 in range(_size22):
                        _key27 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val28 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.stringMap[_key27] = _val28
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.syncState = SyncState()
                    self.syncState.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ConfigValue')
        if self.stringValue is not None:
            oprot.writeFieldBegin('stringValue', TType.STRING, 1)
            oprot.writeString(self.stringValue.encode('utf-8') if sys.version_info[0] == 2 else self.stringValue)
            oprot.writeFieldEnd()
        if self.intValue is not None:
            oprot.writeFieldBegin('intValue', TType.I64, 2)
            oprot.writeI64(self.intValue)
            oprot.writeFieldEnd()
        if self.doubleValue is not None:
            oprot.writeFieldBegin('doubleValue', TType.DOUBLE, 3)
            oprot.writeDouble(self.doubleValue)
            oprot.writeFieldEnd()
        if self.boolValue is not None:
            oprot.writeFieldBegin('boolValue', TType.BOOL, 4)
            oprot.writeBool(self.boolValue)
            oprot.writeFieldEnd()
        if self.stringList is not None:
            oprot.writeFieldBegin('stringList', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.stringList))
            for iter29 in self.stringList:
                oprot.writeString(iter29.encode('utf-8') if sys.version_info[0] == 2 else iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.stringMap is not None:
            oprot.writeFieldBegin('stringMap', TType.MAP, 6)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.stringMap))
            for kiter30, viter31 in self.stringMap.items():
                oprot.writeString(kiter30.encode('utf-8') if sys.version_info[0] == 2 else kiter30)
                oprot.writeString(viter31.encode('utf-8') if sys.version_info[0] == 2 else viter31)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.syncState is not None:
            oprot.writeFieldBegin('syncState', TType.STRUCT, 7)
            self.syncState.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConfigItem(object):
    """
    Attributes:
     - key
     - type
     - value
     - description

    """
    thrift_spec = None


    def __init__(self, key = None, type = None, value = None, description = None,):
        self.key = key
        self.type = type
        self.value = value
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.value = ConfigValue()
                    self.value.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ConfigItem')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 2)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRUCT, 3)
            self.value.write(oprot)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PredictionResult(object):
    """
    Attributes:
     - predictedCategory
     - confidence
     - modelVersion

    """
    thrift_spec = None


    def __init__(self, predictedCategory = None, confidence = None, modelVersion = None,):
        self.predictedCategory = predictedCategory
        self.confidence = confidence
        self.modelVersion = modelVersion

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.predictedCategory = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.confidence = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.modelVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PredictionResult')
        if self.predictedCategory is not None:
            oprot.writeFieldBegin('predictedCategory', TType.STRING, 1)
            oprot.writeString(self.predictedCategory.encode('utf-8') if sys.version_info[0] == 2 else self.predictedCategory)
            oprot.writeFieldEnd()
        if self.confidence is not None:
            oprot.writeFieldBegin('confidence', TType.DOUBLE, 2)
            oprot.writeDouble(self.confidence)
            oprot.writeFieldEnd()
        if self.modelVersion is not None:
            oprot.writeFieldBegin('modelVersion', TType.STRING, 3)
            oprot.writeString(self.modelVersion.encode('utf-8') if sys.version_info[0] == 2 else self.modelVersion)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ModelCard(object):
    """
    Attributes:
     - modelType
     - name
     - version
     - description
     - status
     - trainedDate
     - performanceMetrics

    """
    thrift_spec = None


    def __init__(self, modelType = None, name = None, version = None, description = None, status = None, trainedDate = None, performanceMetrics = None,):
        self.modelType = modelType
        self.name = name
        self.version = version
        self.description = description
        self.status = status
        self.trainedDate = trainedDate
        self.performanceMetrics = performanceMetrics

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.modelType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.trainedDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.performanceMetrics = {}
                    (_ktype33, _vtype34, _size32) = iprot.readMapBegin()
                    for _i36 in range(_size32):
                        _key37 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val38 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.performanceMetrics[_key37] = _val38
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ModelCard')
        if self.modelType is not None:
            oprot.writeFieldBegin('modelType', TType.I32, 1)
            oprot.writeI32(self.modelType)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 3)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 5)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.trainedDate is not None:
            oprot.writeFieldBegin('trainedDate', TType.STRING, 6)
            oprot.writeString(self.trainedDate.encode('utf-8') if sys.version_info[0] == 2 else self.trainedDate)
            oprot.writeFieldEnd()
        if self.performanceMetrics is not None:
            oprot.writeFieldBegin('performanceMetrics', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.performanceMetrics))
            for kiter39, viter40 in self.performanceMetrics.items():
                oprot.writeString(kiter39.encode('utf-8') if sys.version_info[0] == 2 else kiter39)
                oprot.writeString(viter40.encode('utf-8') if sys.version_info[0] == 2 else viter40)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Account(object):
    """
    Attributes:
     - id
     - name
     - type
     - platformType
     - institution
     - currency
     - balance
     - status
     - budgetId

    """
    thrift_spec = None


    def __init__(self, id = None, name = None, type = None, platformType = None, institution = None, currency = None, balance = None, status = None, budgetId = None,):
        self.id = id
        self.name = name
        self.type = type
        self.platformType = platformType
        self.institution = institution
        self.currency = currency
        self.balance = balance
        self.status = status
        self.budgetId = budgetId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.platformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.institution = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.currency = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.balance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.status = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.budgetId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Account')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.platformType is not None:
            oprot.writeFieldBegin('platformType', TType.I32, 4)
            oprot.writeI32(self.platformType)
            oprot.writeFieldEnd()
        if self.institution is not None:
            oprot.writeFieldBegin('institution', TType.STRING, 5)
            oprot.writeString(self.institution.encode('utf-8') if sys.version_info[0] == 2 else self.institution)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 6)
            oprot.writeString(self.currency.encode('utf-8') if sys.version_info[0] == 2 else self.currency)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.DOUBLE, 7)
            oprot.writeDouble(self.balance)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRING, 8)
            oprot.writeString(self.status.encode('utf-8') if sys.version_info[0] == 2 else self.status)
            oprot.writeFieldEnd()
        if self.budgetId is not None:
            oprot.writeFieldBegin('budgetId', TType.STRING, 9)
            oprot.writeString(self.budgetId.encode('utf-8') if sys.version_info[0] == 2 else self.budgetId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Category(object):
    """
    Attributes:
     - id
     - name
     - platformType
     - description
     - isIncomeCategory
     - budgetId

    """
    thrift_spec = None


    def __init__(self, id = None, name = None, platformType = None, description = None, isIncomeCategory = None, budgetId = None,):
        self.id = id
        self.name = name
        self.platformType = platformType
        self.description = description
        self.isIncomeCategory = isIncomeCategory
        self.budgetId = budgetId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.platformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isIncomeCategory = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.budgetId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Category')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.platformType is not None:
            oprot.writeFieldBegin('platformType', TType.I32, 3)
            oprot.writeI32(self.platformType)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.isIncomeCategory is not None:
            oprot.writeFieldBegin('isIncomeCategory', TType.BOOL, 5)
            oprot.writeBool(self.isIncomeCategory)
            oprot.writeFieldEnd()
        if self.budgetId is not None:
            oprot.writeFieldBegin('budgetId', TType.STRING, 6)
            oprot.writeString(self.budgetId.encode('utf-8') if sys.version_info[0] == 2 else self.budgetId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Payee(object):
    """
    Attributes:
     - id
     - name
     - platformType
     - description
     - budgetId

    """
    thrift_spec = None


    def __init__(self, id = None, name = None, platformType = None, description = None, budgetId = None,):
        self.id = id
        self.name = name
        self.platformType = platformType
        self.description = description
        self.budgetId = budgetId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.platformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.budgetId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Payee')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.platformType is not None:
            oprot.writeFieldBegin('platformType', TType.I32, 3)
            oprot.writeI32(self.platformType)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.budgetId is not None:
            oprot.writeFieldBegin('budgetId', TType.STRING, 5)
            oprot.writeString(self.budgetId.encode('utf-8') if sys.version_info[0] == 2 else self.budgetId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Budget(object):
    """
    Attributes:
     - id
     - name
     - currency
     - platformType
     - totalAmount
     - startDate
     - endDate

    """
    thrift_spec = None


    def __init__(self, id = None, name = None, currency = None, platformType = None, totalAmount = None, startDate = None, endDate = None,):
        self.id = id
        self.name = name
        self.currency = currency
        self.platformType = platformType
        self.totalAmount = totalAmount
        self.startDate = startDate
        self.endDate = endDate

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.currency = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.platformType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.totalAmount = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.startDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.endDate = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Budget')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.STRING, 3)
            oprot.writeString(self.currency.encode('utf-8') if sys.version_info[0] == 2 else self.currency)
            oprot.writeFieldEnd()
        if self.platformType is not None:
            oprot.writeFieldBegin('platformType', TType.I32, 4)
            oprot.writeI32(self.platformType)
            oprot.writeFieldEnd()
        if self.totalAmount is not None:
            oprot.writeFieldBegin('totalAmount', TType.DOUBLE, 5)
            oprot.writeDouble(self.totalAmount)
            oprot.writeFieldEnd()
        if self.startDate is not None:
            oprot.writeFieldBegin('startDate', TType.STRING, 6)
            oprot.writeString(self.startDate.encode('utf-8') if sys.version_info[0] == 2 else self.startDate)
            oprot.writeFieldEnd()
        if self.endDate is not None:
            oprot.writeFieldBegin('endDate', TType.STRING, 7)
            oprot.writeString(self.endDate.encode('utf-8') if sys.version_info[0] == 2 else self.endDate)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Transactions(object):
    """
    Attributes:
     - transactions
     - transactionIds

    """
    thrift_spec = None


    def __init__(self, transactions = None, transactionIds = None,):
        self.transactions = transactions
        self.transactionIds = transactionIds

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = Transaction()
                        _elem46.read(iprot)
                        self.transactions.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.transactionIds = []
                    (_etype50, _size47) = iprot.readListBegin()
                    for _i51 in range(_size47):
                        _elem52 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.transactionIds.append(_elem52)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Transactions')
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter53 in self.transactions:
                iter53.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.transactionIds is not None:
            oprot.writeFieldBegin('transactionIds', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.transactionIds))
            for iter54 in self.transactionIds:
                oprot.writeString(iter54.encode('utf-8') if sys.version_info[0] == 2 else iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FileEntity(object):
    """
    Attributes:
     - path
     - name
     - contentType
     - size
     - checksum
     - lastModified
     - metadata

    """
    thrift_spec = None


    def __init__(self, path = None, name = None, contentType = None, size = None, checksum = None, lastModified = None, metadata = None,):
        self.path = path
        self.name = name
        self.contentType = contentType
        self.size = size
        self.checksum = checksum
        self.lastModified = lastModified
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.contentType = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.checksum = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.lastModified = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.metadata = {}
                    (_ktype56, _vtype57, _size55) = iprot.readMapBegin()
                    for _i59 in range(_size55):
                        _key60 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        _val61 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.metadata[_key60] = _val61
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FileEntity')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.contentType is not None:
            oprot.writeFieldBegin('contentType', TType.STRING, 3)
            oprot.writeString(self.contentType.encode('utf-8') if sys.version_info[0] == 2 else self.contentType)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 4)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.STRING, 5)
            oprot.writeString(self.checksum.encode('utf-8') if sys.version_info[0] == 2 else self.checksum)
            oprot.writeFieldEnd()
        if self.lastModified is not None:
            oprot.writeFieldBegin('lastModified', TType.I64, 6)
            oprot.writeI64(self.lastModified)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.metadata))
            for kiter62, viter63 in self.metadata.items():
                oprot.writeString(kiter62.encode('utf-8') if sys.version_info[0] == 2 else kiter62)
                oprot.writeString(viter63.encode('utf-8') if sys.version_info[0] == 2 else viter63)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Entity(object):
    """
    Attributes:
     - transaction
     - metadata
     - configItem
     - modelCard
     - account
     - category
     - payee
     - budget
     - file

    """
    thrift_spec = None


    def __init__(self, transaction = None, metadata = None, configItem = None, modelCard = None, account = None, category = None, payee = None, budget = None, file = None,):
        self.transaction = transaction
        self.metadata = metadata
        self.configItem = configItem
        self.modelCard = modelCard
        self.account = account
        self.category = category
        self.payee = payee
        self.budget = budget
        self.file = file

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.transaction = Transaction()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.metadata = Metadata()
                    self.metadata.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.configItem = ConfigItem()
                    self.configItem.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.modelCard = ModelCard()
                    self.modelCard.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.account = Account()
                    self.account.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.category = Category()
                    self.category.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.payee = Payee()
                    self.payee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.budget = Budget()
                    self.budget.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.file = FileEntity()
                    self.file.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Entity')
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 1)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRUCT, 2)
            self.metadata.write(oprot)
            oprot.writeFieldEnd()
        if self.configItem is not None:
            oprot.writeFieldBegin('configItem', TType.STRUCT, 3)
            self.configItem.write(oprot)
            oprot.writeFieldEnd()
        if self.modelCard is not None:
            oprot.writeFieldBegin('modelCard', TType.STRUCT, 4)
            self.modelCard.write(oprot)
            oprot.writeFieldEnd()
        if self.account is not None:
            oprot.writeFieldBegin('account', TType.STRUCT, 5)
            self.account.write(oprot)
            oprot.writeFieldEnd()
        if self.category is not None:
            oprot.writeFieldBegin('category', TType.STRUCT, 6)
            self.category.write(oprot)
            oprot.writeFieldEnd()
        if self.payee is not None:
            oprot.writeFieldBegin('payee', TType.STRUCT, 7)
            self.payee.write(oprot)
            oprot.writeFieldEnd()
        if self.budget is not None:
            oprot.writeFieldBegin('budget', TType.STRUCT, 8)
            self.budget.write(oprot)
            oprot.writeFieldEnd()
        if self.file is not None:
            oprot.writeFieldBegin('file', TType.STRUCT, 9)
            self.file.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(PrimitiveValue)
PrimitiveValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'doubleValue', None, None, ),  # 2
    (3, TType.I64, 'intValue', None, None, ),  # 3
    (4, TType.BOOL, 'boolValue', None, None, ),  # 4
)
all_structs.append(ExternalSystem)
ExternalSystem.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'budgetingPlatformType', None, None, ),  # 1
    (2, TType.I32, 'emailPlatformType', None, None, ),  # 2
    (3, TType.I32, 'modelType', None, None, ),  # 3
)
all_structs.append(Metadata)
Metadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.STRUCT, 'value', [MetadataValue, None], None, ),  # 3
    (4, TType.STRUCT, 'sourceSystem', [ExternalSystem, None], None, ),  # 4
    (5, TType.STRING, 'description', 'UTF8', None, ),  # 5
    (6, TType.MAP, 'properties', (TType.STRING, 'UTF8', TType.STRUCT, [PrimitiveValue, None], False), None, ),  # 6
)
all_structs.append(MetadataValue)
MetadataValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'predictionResult', [PredictionResult, None], None, ),  # 2
)
all_structs.append(Transaction)
Transaction.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'date', 'UTF8', None, ),  # 2
    (3, TType.I64, 'amount', None, None, ),  # 3
    (4, TType.BOOL, 'approved', None, None, ),  # 4
    (5, TType.I32, 'platformType', None, None, ),  # 5
    (6, TType.STRING, 'payeeId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'categoryId', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'accountId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'budgetId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'memo', 'UTF8', None, ),  # 10
    (11, TType.LIST, 'metadata', (TType.STRUCT, [Metadata, None], False), None, ),  # 11
)
all_structs.append(SyncState)
SyncState.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'platformType', None, None, ),  # 1
    (2, TType.STRING, 'lastSyncInTime', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'lastSyncOutTime', 'UTF8', None, ),  # 3
)
all_structs.append(ConfigValue)
ConfigValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'stringValue', 'UTF8', None, ),  # 1
    (2, TType.I64, 'intValue', None, None, ),  # 2
    (3, TType.DOUBLE, 'doubleValue', None, None, ),  # 3
    (4, TType.BOOL, 'boolValue', None, None, ),  # 4
    (5, TType.LIST, 'stringList', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.MAP, 'stringMap', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.STRUCT, 'syncState', [SyncState, None], None, ),  # 7
)
all_structs.append(ConfigItem)
ConfigItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
    (2, TType.I32, 'type', None, None, ),  # 2
    (3, TType.STRUCT, 'value', [ConfigValue, None], None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
)
all_structs.append(PredictionResult)
PredictionResult.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'predictedCategory', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'confidence', None, None, ),  # 2
    (3, TType.STRING, 'modelVersion', 'UTF8', None, ),  # 3
)
all_structs.append(ModelCard)
ModelCard.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'modelType', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'version', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.I32, 'status', None, None, ),  # 5
    (6, TType.STRING, 'trainedDate', 'UTF8', None, ),  # 6
    (7, TType.MAP, 'performanceMetrics', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(Account)
Account.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
    (4, TType.I32, 'platformType', None, None, ),  # 4
    (5, TType.STRING, 'institution', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'currency', 'UTF8', None, ),  # 6
    (7, TType.DOUBLE, 'balance', None, None, ),  # 7
    (8, TType.STRING, 'status', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'budgetId', 'UTF8', None, ),  # 9
)
all_structs.append(Category)
Category.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'platformType', None, None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'isIncomeCategory', None, None, ),  # 5
    (6, TType.STRING, 'budgetId', 'UTF8', None, ),  # 6
)
all_structs.append(Payee)
Payee.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.I32, 'platformType', None, None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'budgetId', 'UTF8', None, ),  # 5
)
all_structs.append(Budget)
Budget.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'currency', 'UTF8', None, ),  # 3
    (4, TType.I32, 'platformType', None, None, ),  # 4
    (5, TType.DOUBLE, 'totalAmount', None, None, ),  # 5
    (6, TType.STRING, 'startDate', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'endDate', 'UTF8', None, ),  # 7
)
all_structs.append(Transactions)
Transactions.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'transactions', (TType.STRUCT, [Transaction, None], False), None, ),  # 1
    (2, TType.LIST, 'transactionIds', (TType.STRING, 'UTF8', False), None, ),  # 2
)
all_structs.append(FileEntity)
FileEntity.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'contentType', 'UTF8', None, ),  # 3
    (4, TType.I64, 'size', None, None, ),  # 4
    (5, TType.STRING, 'checksum', 'UTF8', None, ),  # 5
    (6, TType.I64, 'lastModified', None, None, ),  # 6
    (7, TType.MAP, 'metadata', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
)
all_structs.append(Entity)
Entity.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'transaction', [Transaction, None], None, ),  # 1
    (2, TType.STRUCT, 'metadata', [Metadata, None], None, ),  # 2
    (3, TType.STRUCT, 'configItem', [ConfigItem, None], None, ),  # 3
    (4, TType.STRUCT, 'modelCard', [ModelCard, None], None, ),  # 4
    (5, TType.STRUCT, 'account', [Account, None], None, ),  # 5
    (6, TType.STRUCT, 'category', [Category, None], None, ),  # 6
    (7, TType.STRUCT, 'payee', [Payee, None], None, ),  # 7
    (8, TType.STRUCT, 'budget', [Budget, None], None, ),  # 8
    (9, TType.STRUCT, 'file', [FileEntity, None], None, ),  # 9
)
fix_spec(all_structs)
del all_structs
