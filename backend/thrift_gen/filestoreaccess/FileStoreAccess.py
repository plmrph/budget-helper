#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def writeFile(self, path, data, format):
        """
        Parameters:
         - path
         - data
         - format

        """
        pass

    def readFile(self, path):
        """
        Parameters:
         - path

        """
        pass

    def deleteFile(self, path):
        """
        Parameters:
         - path

        """
        pass

    def listFiles(self, query):
        """
        Parameters:
         - query

        """
        pass

    def getFileMetadata(self, path):
        """
        Parameters:
         - path

        """
        pass

    def fileExists(self, path):
        """
        Parameters:
         - path

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def writeFile(self, path, data, format):
        """
        Parameters:
         - path
         - data
         - format

        """
        self.send_writeFile(path, data, format)
        return self.recv_writeFile()

    def send_writeFile(self, path, data, format):
        self._oprot.writeMessageBegin('writeFile', TMessageType.CALL, self._seqid)
        args = writeFile_args()
        args.path = path
        args.data = data
        args.format = format
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_writeFile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = writeFile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.validationError is not None:
            raise result.validationError
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        raise TApplicationException(TApplicationException.MISSING_RESULT, "writeFile failed: unknown result")

    def readFile(self, path):
        """
        Parameters:
         - path

        """
        self.send_readFile(path)
        return self.recv_readFile()

    def send_readFile(self, path):
        self._oprot.writeMessageBegin('readFile', TMessageType.CALL, self._seqid)
        args = readFile_args()
        args.path = path
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_readFile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = readFile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.notFound is not None:
            raise result.notFound
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        raise TApplicationException(TApplicationException.MISSING_RESULT, "readFile failed: unknown result")

    def deleteFile(self, path):
        """
        Parameters:
         - path

        """
        self.send_deleteFile(path)
        return self.recv_deleteFile()

    def send_deleteFile(self, path):
        self._oprot.writeMessageBegin('deleteFile', TMessageType.CALL, self._seqid)
        args = deleteFile_args()
        args.path = path
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteFile(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteFile_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.notFound is not None:
            raise result.notFound
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteFile failed: unknown result")

    def listFiles(self, query):
        """
        Parameters:
         - query

        """
        self.send_listFiles(query)
        return self.recv_listFiles()

    def send_listFiles(self, query):
        self._oprot.writeMessageBegin('listFiles', TMessageType.CALL, self._seqid)
        args = listFiles_args()
        args.query = query
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_listFiles(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = listFiles_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.validationError is not None:
            raise result.validationError
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        raise TApplicationException(TApplicationException.MISSING_RESULT, "listFiles failed: unknown result")

    def getFileMetadata(self, path):
        """
        Parameters:
         - path

        """
        self.send_getFileMetadata(path)
        return self.recv_getFileMetadata()

    def send_getFileMetadata(self, path):
        self._oprot.writeMessageBegin('getFileMetadata', TMessageType.CALL, self._seqid)
        args = getFileMetadata_args()
        args.path = path
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getFileMetadata(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getFileMetadata_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.notFound is not None:
            raise result.notFound
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getFileMetadata failed: unknown result")

    def fileExists(self, path):
        """
        Parameters:
         - path

        """
        self.send_fileExists(path)
        return self.recv_fileExists()

    def send_fileExists(self, path):
        self._oprot.writeMessageBegin('fileExists', TMessageType.CALL, self._seqid)
        args = fileExists_args()
        args.path = path
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fileExists(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fileExists_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fileExists failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["writeFile"] = Processor.process_writeFile
        self._processMap["readFile"] = Processor.process_readFile
        self._processMap["deleteFile"] = Processor.process_deleteFile
        self._processMap["listFiles"] = Processor.process_listFiles
        self._processMap["getFileMetadata"] = Processor.process_getFileMetadata
        self._processMap["fileExists"] = Processor.process_fileExists
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_writeFile(self, seqid, iprot, oprot):
        args = writeFile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = writeFile_result()
        try:
            result.success = self._handler.writeFile(args.path, args.data, args.format)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.ValidationException as validationError:
            msg_type = TMessageType.REPLY
            result.validationError = validationError
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("writeFile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_readFile(self, seqid, iprot, oprot):
        args = readFile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = readFile_result()
        try:
            result.success = self._handler.readFile(args.path)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.NotFoundException as notFound:
            msg_type = TMessageType.REPLY
            result.notFound = notFound
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("readFile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteFile(self, seqid, iprot, oprot):
        args = deleteFile_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteFile_result()
        try:
            result.success = self._handler.deleteFile(args.path)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.NotFoundException as notFound:
            msg_type = TMessageType.REPLY
            result.notFound = notFound
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteFile", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_listFiles(self, seqid, iprot, oprot):
        args = listFiles_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = listFiles_result()
        try:
            result.success = self._handler.listFiles(args.query)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.ValidationException as validationError:
            msg_type = TMessageType.REPLY
            result.validationError = validationError
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("listFiles", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getFileMetadata(self, seqid, iprot, oprot):
        args = getFileMetadata_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getFileMetadata_result()
        try:
            result.success = self._handler.getFileMetadata(args.path)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.NotFoundException as notFound:
            msg_type = TMessageType.REPLY
            result.notFound = notFound
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getFileMetadata", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_fileExists(self, seqid, iprot, oprot):
        args = fileExists_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fileExists_result()
        try:
            result.success = self._handler.fileExists(args.path)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fileExists", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class writeFile_args(object):
    """
    Attributes:
     - path
     - data
     - format

    """
    thrift_spec = None


    def __init__(self, path = None, data = None, format = None,):
        self.path = path
        self.data = data
        self.format = format

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.format = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeFile_args')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 2)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.I32, 3)
            oprot.writeI32(self.format)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeFile_args)
writeFile_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'data', 'BINARY', None, ),  # 2
    (3, TType.I32, 'format', None, None, ),  # 3
)


class writeFile_result(object):
    """
    Attributes:
     - success
     - validationError
     - internalError
     - unauthorized

    """
    thrift_spec = None


    def __init__(self, success = None, validationError = None, internalError = None, unauthorized = None,):
        self.success = success
        self.validationError = validationError
        self.internalError = internalError
        self.unauthorized = unauthorized

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.validationError = thrift_gen.exceptions.ttypes.ValidationException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('writeFile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.validationError is not None:
            oprot.writeFieldBegin('validationError', TType.STRUCT, 1)
            self.validationError.write(oprot)
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 2)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 3)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(writeFile_result)
writeFile_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'validationError', [thrift_gen.exceptions.ttypes.ValidationException, None], None, ),  # 1
    (2, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 2
    (3, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 3
)


class readFile_args(object):
    """
    Attributes:
     - path

    """
    thrift_spec = None


    def __init__(self, path = None,):
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readFile_args')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readFile_args)
readFile_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
)


class readFile_result(object):
    """
    Attributes:
     - success
     - notFound
     - internalError
     - unauthorized

    """
    thrift_spec = None


    def __init__(self, success = None, notFound = None, internalError = None, unauthorized = None,):
        self.success = success
        self.notFound = notFound
        self.internalError = internalError
        self.unauthorized = unauthorized

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.notFound = thrift_gen.exceptions.ttypes.NotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('readFile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeBinary(self.success)
            oprot.writeFieldEnd()
        if self.notFound is not None:
            oprot.writeFieldBegin('notFound', TType.STRUCT, 1)
            self.notFound.write(oprot)
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 2)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 3)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(readFile_result)
readFile_result.thrift_spec = (
    (0, TType.STRING, 'success', 'BINARY', None, ),  # 0
    (1, TType.STRUCT, 'notFound', [thrift_gen.exceptions.ttypes.NotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 2
    (3, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 3
)


class deleteFile_args(object):
    """
    Attributes:
     - path

    """
    thrift_spec = None


    def __init__(self, path = None,):
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteFile_args')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteFile_args)
deleteFile_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
)


class deleteFile_result(object):
    """
    Attributes:
     - success
     - notFound
     - internalError
     - unauthorized

    """
    thrift_spec = None


    def __init__(self, success = None, notFound = None, internalError = None, unauthorized = None,):
        self.success = success
        self.notFound = notFound
        self.internalError = internalError
        self.unauthorized = unauthorized

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.notFound = thrift_gen.exceptions.ttypes.NotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteFile_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.notFound is not None:
            oprot.writeFieldBegin('notFound', TType.STRUCT, 1)
            self.notFound.write(oprot)
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 2)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 3)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteFile_result)
deleteFile_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'notFound', [thrift_gen.exceptions.ttypes.NotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 2
    (3, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 3
)


class listFiles_args(object):
    """
    Attributes:
     - query

    """
    thrift_spec = None


    def __init__(self, query = None,):
        self.query = query

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.query = FileQuery()
                    self.query.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('listFiles_args')
        if self.query is not None:
            oprot.writeFieldBegin('query', TType.STRUCT, 1)
            self.query.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(listFiles_args)
listFiles_args.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'query', [FileQuery, None], None, ),  # 1
)


class listFiles_result(object):
    """
    Attributes:
     - success
     - validationError
     - internalError
     - unauthorized

    """
    thrift_spec = None


    def __init__(self, success = None, validationError = None, internalError = None, unauthorized = None,):
        self.success = success
        self.validationError = validationError
        self.internalError = internalError
        self.unauthorized = unauthorized

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = FileMetadata()
                        _elem5.read(iprot)
                        self.success.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.validationError = thrift_gen.exceptions.ttypes.ValidationException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('listFiles_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter6 in self.success:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.validationError is not None:
            oprot.writeFieldBegin('validationError', TType.STRUCT, 1)
            self.validationError.write(oprot)
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 2)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 3)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(listFiles_result)
listFiles_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [FileMetadata, None], False), None, ),  # 0
    (1, TType.STRUCT, 'validationError', [thrift_gen.exceptions.ttypes.ValidationException, None], None, ),  # 1
    (2, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 2
    (3, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 3
)


class getFileMetadata_args(object):
    """
    Attributes:
     - path

    """
    thrift_spec = None


    def __init__(self, path = None,):
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getFileMetadata_args')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getFileMetadata_args)
getFileMetadata_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
)


class getFileMetadata_result(object):
    """
    Attributes:
     - success
     - notFound
     - internalError
     - unauthorized

    """
    thrift_spec = None


    def __init__(self, success = None, notFound = None, internalError = None, unauthorized = None,):
        self.success = success
        self.notFound = notFound
        self.internalError = internalError
        self.unauthorized = unauthorized

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = FileMetadata()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.notFound = thrift_gen.exceptions.ttypes.NotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getFileMetadata_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.notFound is not None:
            oprot.writeFieldBegin('notFound', TType.STRUCT, 1)
            self.notFound.write(oprot)
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 2)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 3)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getFileMetadata_result)
getFileMetadata_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [FileMetadata, None], None, ),  # 0
    (1, TType.STRUCT, 'notFound', [thrift_gen.exceptions.ttypes.NotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 2
    (3, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 3
)


class fileExists_args(object):
    """
    Attributes:
     - path

    """
    thrift_spec = None


    def __init__(self, path = None,):
        self.path = path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fileExists_args')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fileExists_args)
fileExists_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
)


class fileExists_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fileExists_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fileExists_result)
fileExists_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
