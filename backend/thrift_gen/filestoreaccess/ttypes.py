#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys
import thrift_gen.entities.ttypes
import thrift_gen.exceptions.ttypes

from thrift.transport import TTransport
all_structs = []


class FileFormat(object):
    JSON = 1
    CSV = 2
    XML = 3
    BINARY = 4

    _VALUES_TO_NAMES = {
        1: "JSON",
        2: "CSV",
        3: "XML",
        4: "BINARY",
    }

    _NAMES_TO_VALUES = {
        "JSON": 1,
        "CSV": 2,
        "XML": 3,
        "BINARY": 4,
    }


class FileMetadata(object):
    """
    Attributes:
     - path
     - format
     - size
     - checksum
     - lastModified

    """
    thrift_spec = None


    def __init__(self, path = None, format = None, size = None, checksum = None, lastModified = None,):
        self.path = path
        self.format = format
        self.size = size
        self.checksum = checksum
        self.lastModified = lastModified

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.format = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.size = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.checksum = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.lastModified = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FileMetadata')
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 1)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.I32, 2)
            oprot.writeI32(self.format)
            oprot.writeFieldEnd()
        if self.size is not None:
            oprot.writeFieldBegin('size', TType.I64, 3)
            oprot.writeI64(self.size)
            oprot.writeFieldEnd()
        if self.checksum is not None:
            oprot.writeFieldBegin('checksum', TType.STRING, 4)
            oprot.writeString(self.checksum.encode('utf-8') if sys.version_info[0] == 2 else self.checksum)
            oprot.writeFieldEnd()
        if self.lastModified is not None:
            oprot.writeFieldBegin('lastModified', TType.I64, 5)
            oprot.writeI64(self.lastModified)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FileQuery(object):
    """
    Attributes:
     - pathPattern
     - format
     - minSize
     - maxSize
     - modifiedAfter
     - modifiedBefore

    """
    thrift_spec = None


    def __init__(self, pathPattern = None, format = None, minSize = None, maxSize = None, modifiedAfter = None, modifiedBefore = None,):
        self.pathPattern = pathPattern
        self.format = format
        self.minSize = minSize
        self.maxSize = maxSize
        self.modifiedAfter = modifiedAfter
        self.modifiedBefore = modifiedBefore

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.pathPattern = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.format = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.minSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.maxSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.modifiedAfter = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.modifiedBefore = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FileQuery')
        if self.pathPattern is not None:
            oprot.writeFieldBegin('pathPattern', TType.STRING, 1)
            oprot.writeString(self.pathPattern.encode('utf-8') if sys.version_info[0] == 2 else self.pathPattern)
            oprot.writeFieldEnd()
        if self.format is not None:
            oprot.writeFieldBegin('format', TType.I32, 2)
            oprot.writeI32(self.format)
            oprot.writeFieldEnd()
        if self.minSize is not None:
            oprot.writeFieldBegin('minSize', TType.I64, 3)
            oprot.writeI64(self.minSize)
            oprot.writeFieldEnd()
        if self.maxSize is not None:
            oprot.writeFieldBegin('maxSize', TType.I64, 4)
            oprot.writeI64(self.maxSize)
            oprot.writeFieldEnd()
        if self.modifiedAfter is not None:
            oprot.writeFieldBegin('modifiedAfter', TType.I64, 5)
            oprot.writeI64(self.modifiedAfter)
            oprot.writeFieldEnd()
        if self.modifiedBefore is not None:
            oprot.writeFieldBegin('modifiedBefore', TType.I64, 6)
            oprot.writeI64(self.modifiedBefore)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(FileMetadata)
FileMetadata.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'path', 'UTF8', None, ),  # 1
    (2, TType.I32, 'format', None, None, ),  # 2
    (3, TType.I64, 'size', None, None, ),  # 3
    (4, TType.STRING, 'checksum', 'UTF8', None, ),  # 4
    (5, TType.I64, 'lastModified', None, None, ),  # 5
)
all_structs.append(FileQuery)
FileQuery.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'pathPattern', 'UTF8', None, ),  # 1
    (2, TType.I32, 'format', None, None, ),  # 2
    (3, TType.I64, 'minSize', None, None, ),  # 3
    (4, TType.I64, 'maxSize', None, None, ),  # 4
    (5, TType.I64, 'modifiedAfter', None, None, ),  # 5
    (6, TType.I64, 'modifiedBefore', None, None, ),  # 6
)
fix_spec(all_structs)
del all_structs
