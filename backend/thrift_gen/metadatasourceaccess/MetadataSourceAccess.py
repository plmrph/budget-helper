#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def authenticate(self):
        """
        Authenticate to the external platform (e.g., BudgetingPlatform, EmailPlatform)
        If already authenticated, returns status. Otherwise, attempts authentication and persists result.
        Fetches information from Configs singleton, and populates auth data back to Configs

        """
        pass

    def getMetadata(self, queries):
        """
        Parameters:
         - queries

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def authenticate(self):
        """
        Authenticate to the external platform (e.g., BudgetingPlatform, EmailPlatform)
        If already authenticated, returns status. Otherwise, attempts authentication and persists result.
        Fetches information from Configs singleton, and populates auth data back to Configs

        """
        self.send_authenticate()
        return self.recv_authenticate()

    def send_authenticate(self):
        self._oprot.writeMessageBegin('authenticate', TMessageType.CALL, self._seqid)
        args = authenticate_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_authenticate(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = authenticate_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        if result.remoteError is not None:
            raise result.remoteError
        raise TApplicationException(TApplicationException.MISSING_RESULT, "authenticate failed: unknown result")

    def getMetadata(self, queries):
        """
        Parameters:
         - queries

        """
        self.send_getMetadata(queries)
        return self.recv_getMetadata()

    def send_getMetadata(self, queries):
        self._oprot.writeMessageBegin('getMetadata', TMessageType.CALL, self._seqid)
        args = getMetadata_args()
        args.queries = queries
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getMetadata(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getMetadata_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.internalError is not None:
            raise result.internalError
        if result.unauthorized is not None:
            raise result.unauthorized
        if result.notFound is not None:
            raise result.notFound
        if result.remoteError is not None:
            raise result.remoteError
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getMetadata failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["authenticate"] = Processor.process_authenticate
        self._processMap["getMetadata"] = Processor.process_getMetadata
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_authenticate(self, seqid, iprot, oprot):
        args = authenticate_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = authenticate_result()
        try:
            result.success = self._handler.authenticate()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except thrift_gen.exceptions.ttypes.RemoteServiceException as remoteError:
            msg_type = TMessageType.REPLY
            result.remoteError = remoteError
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("authenticate", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getMetadata(self, seqid, iprot, oprot):
        args = getMetadata_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getMetadata_result()
        try:
            result.success = self._handler.getMetadata(args.queries)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except thrift_gen.exceptions.ttypes.InternalException as internalError:
            msg_type = TMessageType.REPLY
            result.internalError = internalError
        except thrift_gen.exceptions.ttypes.UnauthorizedException as unauthorized:
            msg_type = TMessageType.REPLY
            result.unauthorized = unauthorized
        except thrift_gen.exceptions.ttypes.NotFoundException as notFound:
            msg_type = TMessageType.REPLY
            result.notFound = notFound
        except thrift_gen.exceptions.ttypes.RemoteServiceException as remoteError:
            msg_type = TMessageType.REPLY
            result.remoteError = remoteError
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getMetadata", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class authenticate_args(object):
    thrift_spec = None


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('authenticate_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(authenticate_args)
authenticate_args.thrift_spec = (
)


class authenticate_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized
     - remoteError

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None, remoteError = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized
        self.remoteError = remoteError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.remoteError = thrift_gen.exceptions.ttypes.RemoteServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('authenticate_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        if self.remoteError is not None:
            oprot.writeFieldBegin('remoteError', TType.STRUCT, 3)
            self.remoteError.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(authenticate_result)
authenticate_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
    (3, TType.STRUCT, 'remoteError', [thrift_gen.exceptions.ttypes.RemoteServiceException, None], None, ),  # 3
)


class getMetadata_args(object):
    """
    Attributes:
     - queries

    """
    thrift_spec = None


    def __init__(self, queries = None,):
        self.queries = queries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.queries = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = MetadataSourceQuery()
                        _elem5.read(iprot)
                        self.queries.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMetadata_args')
        if self.queries is not None:
            oprot.writeFieldBegin('queries', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.queries))
            for iter6 in self.queries:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMetadata_args)
getMetadata_args.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'queries', (TType.STRUCT, [MetadataSourceQuery, None], False), None, ),  # 1
)


class getMetadata_result(object):
    """
    Attributes:
     - success
     - internalError
     - unauthorized
     - notFound
     - remoteError

    """
    thrift_spec = None


    def __init__(self, success = None, internalError = None, unauthorized = None, notFound = None, remoteError = None,):
        self.success = success
        self.internalError = internalError
        self.unauthorized = unauthorized
        self.notFound = notFound
        self.remoteError = remoteError

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = thrift_gen.entities.ttypes.Metadata()
                        _elem12.read(iprot)
                        self.success.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.internalError = thrift_gen.exceptions.ttypes.InternalException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.unauthorized = thrift_gen.exceptions.ttypes.UnauthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.notFound = thrift_gen.exceptions.ttypes.NotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.remoteError = thrift_gen.exceptions.ttypes.RemoteServiceException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getMetadata_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter13 in self.success:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.internalError is not None:
            oprot.writeFieldBegin('internalError', TType.STRUCT, 1)
            self.internalError.write(oprot)
            oprot.writeFieldEnd()
        if self.unauthorized is not None:
            oprot.writeFieldBegin('unauthorized', TType.STRUCT, 2)
            self.unauthorized.write(oprot)
            oprot.writeFieldEnd()
        if self.notFound is not None:
            oprot.writeFieldBegin('notFound', TType.STRUCT, 3)
            self.notFound.write(oprot)
            oprot.writeFieldEnd()
        if self.remoteError is not None:
            oprot.writeFieldBegin('remoteError', TType.STRUCT, 4)
            self.remoteError.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getMetadata_result)
getMetadata_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [thrift_gen.entities.ttypes.Metadata, None], False), None, ),  # 0
    (1, TType.STRUCT, 'internalError', [thrift_gen.exceptions.ttypes.InternalException, None], None, ),  # 1
    (2, TType.STRUCT, 'unauthorized', [thrift_gen.exceptions.ttypes.UnauthorizedException, None], None, ),  # 2
    (3, TType.STRUCT, 'notFound', [thrift_gen.exceptions.ttypes.NotFoundException, None], None, ),  # 3
    (4, TType.STRUCT, 'remoteError', [thrift_gen.exceptions.ttypes.RemoteServiceException, None], None, ),  # 4
)
fix_spec(all_structs)
del all_structs
