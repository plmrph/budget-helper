#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys
import thrift_gen.entities.ttypes
import thrift_gen.mlengine.ttypes
import thrift_gen.exceptions.ttypes

from thrift.transport import TTransport
all_structs = []


class PredictionRequest(object):
    """
    Attributes:
     - transactions
     - modelCard

    """
    thrift_spec = None


    def __init__(self, transactions = None, modelCard = None,):
        self.transactions = transactions
        self.modelCard = modelCard

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.transactions = thrift_gen.entities.ttypes.Transactions()
                    self.transactions.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.modelCard = thrift_gen.entities.ttypes.ModelCard()
                    self.modelCard.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PredictionRequest')
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.STRUCT, 1)
            self.transactions.write(oprot)
            oprot.writeFieldEnd()
        if self.modelCard is not None:
            oprot.writeFieldBegin('modelCard', TType.STRUCT, 2)
            self.modelCard.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PredictionResult(object):
    """
    Attributes:
     - results
     - errorMessage

    """
    thrift_spec = None


    def __init__(self, results = None, errorMessage = None,):
        self.results = results
        self.errorMessage = errorMessage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.results = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readI32()
                        _val6 = []
                        (_etype10, _size7) = iprot.readListBegin()
                        for _i11 in range(_size7):
                            _elem12 = thrift_gen.mlengine.ttypes.CategoricalPredictionResult()
                            _elem12.read(iprot)
                            _val6.append(_elem12)
                        iprot.readListEnd()
                        self.results[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PredictionResult')
        if self.results is not None:
            oprot.writeFieldBegin('results', TType.MAP, 1)
            oprot.writeMapBegin(TType.I32, TType.LIST, len(self.results))
            for kiter13, viter14 in self.results.items():
                oprot.writeI32(kiter13)
                oprot.writeListBegin(TType.STRUCT, len(viter14))
                for iter15 in viter14:
                    iter15.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.errorMessage is not None:
            oprot.writeFieldBegin('errorMessage', TType.STRING, 2)
            oprot.writeString(self.errorMessage.encode('utf-8') if sys.version_info[0] == 2 else self.errorMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrainingDataPreparationRequest(object):
    """
    Attributes:
     - budgetId
     - monthsBack
     - testSplitRatio
     - minSamplesPerCategory

    """
    thrift_spec = None


    def __init__(self, budgetId = None, monthsBack = 6, testSplitRatio = 0.2000000000000000, minSamplesPerCategory = 1,):
        self.budgetId = budgetId
        self.monthsBack = monthsBack
        self.testSplitRatio = testSplitRatio
        self.minSamplesPerCategory = minSamplesPerCategory

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.budgetId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.monthsBack = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.testSplitRatio = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.minSamplesPerCategory = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrainingDataPreparationRequest')
        if self.budgetId is not None:
            oprot.writeFieldBegin('budgetId', TType.STRING, 1)
            oprot.writeString(self.budgetId.encode('utf-8') if sys.version_info[0] == 2 else self.budgetId)
            oprot.writeFieldEnd()
        if self.monthsBack is not None:
            oprot.writeFieldBegin('monthsBack', TType.I32, 2)
            oprot.writeI32(self.monthsBack)
            oprot.writeFieldEnd()
        if self.testSplitRatio is not None:
            oprot.writeFieldBegin('testSplitRatio', TType.DOUBLE, 3)
            oprot.writeDouble(self.testSplitRatio)
            oprot.writeFieldEnd()
        if self.minSamplesPerCategory is not None:
            oprot.writeFieldBegin('minSamplesPerCategory', TType.I32, 4)
            oprot.writeI32(self.minSamplesPerCategory)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(PredictionRequest)
PredictionRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'transactions', [thrift_gen.entities.ttypes.Transactions, None], None, ),  # 1
    (2, TType.STRUCT, 'modelCard', [thrift_gen.entities.ttypes.ModelCard, None], None, ),  # 2
)
all_structs.append(PredictionResult)
PredictionResult.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'results', (TType.I32, None, TType.LIST, (TType.STRUCT, [thrift_gen.mlengine.ttypes.CategoricalPredictionResult, None], False), False), None, ),  # 1
    (2, TType.STRING, 'errorMessage', 'UTF8', None, ),  # 2
)
all_structs.append(TrainingDataPreparationRequest)
TrainingDataPreparationRequest.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'budgetId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'monthsBack', None, 6, ),  # 2
    (3, TType.DOUBLE, 'testSplitRatio', None, 0.2000000000000000, ),  # 3
    (4, TType.I32, 'minSamplesPerCategory', None, 1, ),  # 4
)
fix_spec(all_structs)
del all_structs
