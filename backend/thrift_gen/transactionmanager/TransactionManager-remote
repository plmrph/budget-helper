#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from thrift_gen.transactionmanager import TransactionManager
from thrift_gen.transactionmanager.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  BudgetsInfoResult getBudgetsInfo( budgetIds,  entityTypes)')
    print('  Transaction getTransaction(string transactionId)')
    print('   getTransactions( transactionIds)')
    print('   updateTransactions( transactionEdits)')
    print('  Transaction attachTransactionMetadata(string transactionId, Metadata metadata)')
    print('  Transaction detachTransactionMetadata(string transactionId, string metadataId)')
    print('   findTransactionMetadata(string transactionId)')
    print('   getPendingTransactions()')
    print('   getAllTransactions()')
    print('  SyncResult syncTransactionsIn(BudgetingPlatformType budgetPlatform)')
    print('  SyncResult syncTransactionsOut(BudgetingPlatformType budgetPlatform)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TransactionManager.Client(protocol)
transport.open()

if cmd == 'getBudgetsInfo':
    if len(args) != 2:
        print('getBudgetsInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.getBudgetsInfo(eval(args[0]), eval(args[1]),))

elif cmd == 'getTransaction':
    if len(args) != 1:
        print('getTransaction requires 1 args')
        sys.exit(1)
    pp.pprint(client.getTransaction(args[0],))

elif cmd == 'getTransactions':
    if len(args) != 1:
        print('getTransactions requires 1 args')
        sys.exit(1)
    pp.pprint(client.getTransactions(eval(args[0]),))

elif cmd == 'updateTransactions':
    if len(args) != 1:
        print('updateTransactions requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateTransactions(eval(args[0]),))

elif cmd == 'attachTransactionMetadata':
    if len(args) != 2:
        print('attachTransactionMetadata requires 2 args')
        sys.exit(1)
    pp.pprint(client.attachTransactionMetadata(args[0], eval(args[1]),))

elif cmd == 'detachTransactionMetadata':
    if len(args) != 2:
        print('detachTransactionMetadata requires 2 args')
        sys.exit(1)
    pp.pprint(client.detachTransactionMetadata(args[0], args[1],))

elif cmd == 'findTransactionMetadata':
    if len(args) != 1:
        print('findTransactionMetadata requires 1 args')
        sys.exit(1)
    pp.pprint(client.findTransactionMetadata(args[0],))

elif cmd == 'getPendingTransactions':
    if len(args) != 0:
        print('getPendingTransactions requires 0 args')
        sys.exit(1)
    pp.pprint(client.getPendingTransactions())

elif cmd == 'getAllTransactions':
    if len(args) != 0:
        print('getAllTransactions requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAllTransactions())

elif cmd == 'syncTransactionsIn':
    if len(args) != 1:
        print('syncTransactionsIn requires 1 args')
        sys.exit(1)
    pp.pprint(client.syncTransactionsIn(eval(args[0]),))

elif cmd == 'syncTransactionsOut':
    if len(args) != 1:
        print('syncTransactionsOut requires 1 args')
        sys.exit(1)
    pp.pprint(client.syncTransactionsOut(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
