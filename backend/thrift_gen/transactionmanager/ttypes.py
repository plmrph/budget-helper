#
# Autogenerated by Thrift Compiler (0.22.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec
from uuid import UUID

import sys
import thrift_gen.entities.ttypes
import thrift_gen.exceptions.ttypes

from thrift.transport import TTransport
all_structs = []


class TransactionEdit(object):
    """
    Attributes:
     - transactionId
     - categoryId
     - approved
     - memo
     - metadata

    """
    thrift_spec = None


    def __init__(self, transactionId = None, categoryId = None, approved = None, memo = None, metadata = None,):
        self.transactionId = transactionId
        self.categoryId = categoryId
        self.approved = approved
        self.memo = memo
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.transactionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.categoryId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.approved = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.memo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.metadata = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = thrift_gen.entities.ttypes.Metadata()
                        _elem5.read(iprot)
                        self.metadata.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionEdit')
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.STRING, 1)
            oprot.writeString(self.transactionId.encode('utf-8') if sys.version_info[0] == 2 else self.transactionId)
            oprot.writeFieldEnd()
        if self.categoryId is not None:
            oprot.writeFieldBegin('categoryId', TType.STRING, 2)
            oprot.writeString(self.categoryId.encode('utf-8') if sys.version_info[0] == 2 else self.categoryId)
            oprot.writeFieldEnd()
        if self.approved is not None:
            oprot.writeFieldBegin('approved', TType.BOOL, 3)
            oprot.writeBool(self.approved)
            oprot.writeFieldEnd()
        if self.memo is not None:
            oprot.writeFieldBegin('memo', TType.STRING, 4)
            oprot.writeString(self.memo.encode('utf-8') if sys.version_info[0] == 2 else self.memo)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.LIST, 5)
            oprot.writeListBegin(TType.STRUCT, len(self.metadata))
            for iter6 in self.metadata:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SyncResultItem(object):
    """
    Attributes:
     - transactionId
     - status
     - errorMessage

    """
    thrift_spec = None


    def __init__(self, transactionId = None, status = None, errorMessage = None,):
        self.transactionId = transactionId
        self.status = status
        self.errorMessage = errorMessage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.transactionId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.errorMessage = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SyncResultItem')
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.STRING, 1)
            oprot.writeString(self.transactionId.encode('utf-8') if sys.version_info[0] == 2 else self.transactionId)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 2)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.errorMessage is not None:
            oprot.writeFieldBegin('errorMessage', TType.STRING, 3)
            oprot.writeString(self.errorMessage.encode('utf-8') if sys.version_info[0] == 2 else self.errorMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SyncResult(object):
    """
    Attributes:
     - results
     - batchStatus

    """
    thrift_spec = None


    def __init__(self, results = None, batchStatus = None,):
        self.results = results
        self.batchStatus = batchStatus

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.results = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = SyncResultItem()
                        _elem12.read(iprot)
                        self.results.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.batchStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SyncResult')
        if self.results is not None:
            oprot.writeFieldBegin('results', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.results))
            for iter13 in self.results:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.batchStatus is not None:
            oprot.writeFieldBegin('batchStatus', TType.I32, 2)
            oprot.writeI32(self.batchStatus)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BudgetsInfoResult(object):
    """
    Get information about budgets and associated entities.

    If no parameters are provided, returns info for the default budget.
    If budgetIds are provided, returns info for those budgets.
    If entityTypes is provided, also returns data for specified entity types (limited to Account, Payee, Category).

    Attributes:
     - budgets
     - accounts
     - payees
     - categories

    """
    thrift_spec = None


    def __init__(self, budgets = None, accounts = None, payees = None, categories = None,):
        self.budgets = budgets
        self.accounts = accounts
        self.payees = payees
        self.categories = categories

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.budgets = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = thrift_gen.entities.ttypes.Budget()
                        _elem19.read(iprot)
                        self.budgets.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.accounts = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = thrift_gen.entities.ttypes.Account()
                        _elem25.read(iprot)
                        self.accounts.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.payees = []
                    (_etype29, _size26) = iprot.readListBegin()
                    for _i30 in range(_size26):
                        _elem31 = thrift_gen.entities.ttypes.Payee()
                        _elem31.read(iprot)
                        self.payees.append(_elem31)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.categories = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = thrift_gen.entities.ttypes.Category()
                        _elem37.read(iprot)
                        self.categories.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        self.validate()
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BudgetsInfoResult')
        if self.budgets is not None:
            oprot.writeFieldBegin('budgets', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.budgets))
            for iter38 in self.budgets:
                iter38.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.accounts is not None:
            oprot.writeFieldBegin('accounts', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.accounts))
            for iter39 in self.accounts:
                iter39.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.payees is not None:
            oprot.writeFieldBegin('payees', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.payees))
            for iter40 in self.payees:
                iter40.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.categories is not None:
            oprot.writeFieldBegin('categories', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.categories))
            for iter41 in self.categories:
                iter41.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TransactionEdit)
TransactionEdit.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'transactionId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'categoryId', 'UTF8', None, ),  # 2
    (3, TType.BOOL, 'approved', None, None, ),  # 3
    (4, TType.STRING, 'memo', 'UTF8', None, ),  # 4
    (5, TType.LIST, 'metadata', (TType.STRUCT, [thrift_gen.entities.ttypes.Metadata, None], False), None, ),  # 5
)
all_structs.append(SyncResultItem)
SyncResultItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'transactionId', 'UTF8', None, ),  # 1
    (2, TType.I32, 'status', None, None, ),  # 2
    (3, TType.STRING, 'errorMessage', 'UTF8', None, ),  # 3
)
all_structs.append(SyncResult)
SyncResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'results', (TType.STRUCT, [SyncResultItem, None], False), None, ),  # 1
    (2, TType.I32, 'batchStatus', None, None, ),  # 2
)
all_structs.append(BudgetsInfoResult)
BudgetsInfoResult.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'budgets', (TType.STRUCT, [thrift_gen.entities.ttypes.Budget, None], False), None, ),  # 1
    (2, TType.LIST, 'accounts', (TType.STRUCT, [thrift_gen.entities.ttypes.Account, None], False), None, ),  # 2
    (3, TType.LIST, 'payees', (TType.STRUCT, [thrift_gen.entities.ttypes.Payee, None], False), None, ),  # 3
    (4, TType.LIST, 'categories', (TType.STRUCT, [thrift_gen.entities.ttypes.Category, None], False), None, ),  # 4
)
fix_spec(all_structs)
del all_structs
